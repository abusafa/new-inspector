
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  phoneNumber: 'phoneNumber',
  name: 'name',
  role: 'role',
  email: 'email',
  department: 'department',
  location: 'location',
  employeeId: 'employeeId',
  supervisor: 'supervisor',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  loginTime: 'loginTime',
  settings: 'settings'
};

exports.Prisma.WorkOrderScalarFieldEnum = {
  id: 'id',
  workOrderId: 'workOrderId',
  title: 'title',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dueDate: 'dueDate',
  status: 'status',
  assignedTo: 'assignedTo',
  location: 'location',
  priority: 'priority',
  estimatedDuration: 'estimatedDuration',
  requiredSkills: 'requiredSkills',
  workOrderTemplateId: 'workOrderTemplateId',
  createdBy: 'createdBy',
  dependencies: 'dependencies'
};

exports.Prisma.InspectionTemplateScalarFieldEnum = {
  id: 'id',
  templateId: 'templateId',
  name: 'name',
  description: 'description',
  schemaJson: 'schemaJson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  category: 'category',
  tags: 'tags',
  version: 'version',
  status: 'status',
  isPublic: 'isPublic',
  createdBy: 'createdBy',
  lastModifiedBy: 'lastModifiedBy',
  estimatedDuration: 'estimatedDuration',
  difficulty: 'difficulty',
  industry: 'industry',
  equipmentType: 'equipmentType',
  parentId: 'parentId',
  isLatestVersion: 'isLatestVersion'
};

exports.Prisma.AssetScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  name: 'name',
  type: 'type',
  category: 'category',
  location: 'location',
  manufacturer: 'manufacturer',
  model: 'model',
  serialNumber: 'serialNumber',
  status: 'status',
  lastInspected: 'lastInspected',
  nextInspectionDue: 'nextInspectionDue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  purchaseDate: 'purchaseDate',
  warrantyExpiry: 'warrantyExpiry',
  specifications: 'specifications',
  notes: 'notes'
};

exports.Prisma.WorkOrderAssetScalarFieldEnum = {
  id: 'id',
  workOrderId: 'workOrderId',
  assetId: 'assetId',
  notes: 'notes',
  priority: 'priority'
};

exports.Prisma.WorkOrderTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  priority: 'priority',
  estimatedDuration: 'estimatedDuration',
  defaultAssignee: 'defaultAssignee',
  requiredSkills: 'requiredSkills',
  inspectionTemplateIds: 'inspectionTemplateIds',
  checklist: 'checklist',
  notifications: 'notifications',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.RecurringScheduleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  workOrderTemplateId: 'workOrderTemplateId',
  assignedTo: 'assignedTo',
  assignedGroup: 'assignedGroup',
  location: 'location',
  priority: 'priority',
  frequency: 'frequency',
  interval: 'interval',
  startDate: 'startDate',
  endDate: 'endDate',
  daysOfWeek: 'daysOfWeek',
  dayOfMonth: 'dayOfMonth',
  time: 'time',
  timezone: 'timezone',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  lastGenerated: 'lastGenerated',
  nextDue: 'nextDue',
  totalGenerated: 'totalGenerated',
  completedCount: 'completedCount',
  overdueCount: 'overdueCount'
};

exports.Prisma.InspectionScalarFieldEnum = {
  id: 'id',
  inspectionId: 'inspectionId',
  workOrderId: 'workOrderId',
  templateId: 'templateId',
  status: 'status',
  required: 'required',
  order: 'order',
  completedAt: 'completedAt',
  resultJson: 'resultJson'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  WorkOrder: 'WorkOrder',
  InspectionTemplate: 'InspectionTemplate',
  Asset: 'Asset',
  WorkOrderAsset: 'WorkOrderAsset',
  WorkOrderTemplate: 'WorkOrderTemplate',
  RecurringSchedule: 'RecurringSchedule',
  Inspection: 'Inspection'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
