import { PrismaService } from '../prisma.service';
interface RecurringScheduleQueryDto {
    isActive?: boolean;
    frequency?: string;
    search?: string;
    page?: number;
    limit?: number;
    sortBy?: string;
    sortOrder?: 'asc' | 'desc';
}
export declare class RecurringSchedulesController {
    private readonly prisma;
    constructor(prisma: PrismaService);
    list(query: RecurringScheduleQueryDto): Promise<{
        data: {
            nextDueIn: string;
            isOverdue: boolean;
            workOrderTemplate: {
                id: string;
                name: string;
                category: string;
                estimatedDuration: number;
            };
            id: string;
            name: string;
            location: string | null;
            createdAt: Date;
            updatedAt: Date;
            timezone: string;
            description: string;
            createdBy: string | null;
            assignedTo: string | null;
            priority: string;
            workOrderTemplateId: string;
            isActive: boolean;
            assignedGroup: string | null;
            frequency: string;
            interval: number;
            startDate: Date;
            endDate: Date | null;
            daysOfWeek: number[];
            dayOfMonth: number | null;
            time: string | null;
            lastGenerated: Date | null;
            nextDue: Date | null;
            totalGenerated: number;
            completedCount: number;
            overdueCount: number;
        }[];
        pagination: {
            page: number;
            limit: number;
            total: number;
            totalPages: number;
        };
    }>;
    getDueToday(): Promise<({
        workOrderTemplate: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            notifications: import("@prisma/client/runtime/library").JsonValue;
            description: string;
            category: string;
            createdBy: string | null;
            estimatedDuration: number;
            priority: string;
            requiredSkills: string[];
            defaultAssignee: string | null;
            inspectionTemplateIds: string[];
            checklist: import("@prisma/client/runtime/library").JsonValue;
            isActive: boolean;
        };
    } & {
        id: string;
        name: string;
        location: string | null;
        createdAt: Date;
        updatedAt: Date;
        timezone: string;
        description: string;
        createdBy: string | null;
        assignedTo: string | null;
        priority: string;
        workOrderTemplateId: string;
        isActive: boolean;
        assignedGroup: string | null;
        frequency: string;
        interval: number;
        startDate: Date;
        endDate: Date | null;
        daysOfWeek: number[];
        dayOfMonth: number | null;
        time: string | null;
        lastGenerated: Date | null;
        nextDue: Date | null;
        totalGenerated: number;
        completedCount: number;
        overdueCount: number;
    })[]>;
    getOverdue(): Promise<({
        workOrderTemplate: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            notifications: import("@prisma/client/runtime/library").JsonValue;
            description: string;
            category: string;
            createdBy: string | null;
            estimatedDuration: number;
            priority: string;
            requiredSkills: string[];
            defaultAssignee: string | null;
            inspectionTemplateIds: string[];
            checklist: import("@prisma/client/runtime/library").JsonValue;
            isActive: boolean;
        };
    } & {
        id: string;
        name: string;
        location: string | null;
        createdAt: Date;
        updatedAt: Date;
        timezone: string;
        description: string;
        createdBy: string | null;
        assignedTo: string | null;
        priority: string;
        workOrderTemplateId: string;
        isActive: boolean;
        assignedGroup: string | null;
        frequency: string;
        interval: number;
        startDate: Date;
        endDate: Date | null;
        daysOfWeek: number[];
        dayOfMonth: number | null;
        time: string | null;
        lastGenerated: Date | null;
        nextDue: Date | null;
        totalGenerated: number;
        completedCount: number;
        overdueCount: number;
    })[]>;
    get(id: string): Promise<{
        nextDueIn: string;
        isOverdue: boolean;
        recentWorkOrders: {
            id: string;
            location: string | null;
            createdAt: Date;
            updatedAt: Date;
            description: string;
            status: string;
            createdBy: string | null;
            estimatedDuration: number | null;
            workOrderId: string;
            title: string;
            dueDate: Date | null;
            assignedTo: string;
            priority: string;
            requiredSkills: string[];
            dependencies: string[];
            workOrderTemplateId: string | null;
        }[];
        workOrderTemplate: {
            workOrders: {
                id: string;
                location: string | null;
                createdAt: Date;
                updatedAt: Date;
                description: string;
                status: string;
                createdBy: string | null;
                estimatedDuration: number | null;
                workOrderId: string;
                title: string;
                dueDate: Date | null;
                assignedTo: string;
                priority: string;
                requiredSkills: string[];
                dependencies: string[];
                workOrderTemplateId: string | null;
            }[];
        } & {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            notifications: import("@prisma/client/runtime/library").JsonValue;
            description: string;
            category: string;
            createdBy: string | null;
            estimatedDuration: number;
            priority: string;
            requiredSkills: string[];
            defaultAssignee: string | null;
            inspectionTemplateIds: string[];
            checklist: import("@prisma/client/runtime/library").JsonValue;
            isActive: boolean;
        };
        id: string;
        name: string;
        location: string | null;
        createdAt: Date;
        updatedAt: Date;
        timezone: string;
        description: string;
        createdBy: string | null;
        assignedTo: string | null;
        priority: string;
        workOrderTemplateId: string;
        isActive: boolean;
        assignedGroup: string | null;
        frequency: string;
        interval: number;
        startDate: Date;
        endDate: Date | null;
        daysOfWeek: number[];
        dayOfMonth: number | null;
        time: string | null;
        lastGenerated: Date | null;
        nextDue: Date | null;
        totalGenerated: number;
        completedCount: number;
        overdueCount: number;
    }>;
    create(body: any): Promise<{
        workOrderTemplate: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            notifications: import("@prisma/client/runtime/library").JsonValue;
            description: string;
            category: string;
            createdBy: string | null;
            estimatedDuration: number;
            priority: string;
            requiredSkills: string[];
            defaultAssignee: string | null;
            inspectionTemplateIds: string[];
            checklist: import("@prisma/client/runtime/library").JsonValue;
            isActive: boolean;
        };
    } & {
        id: string;
        name: string;
        location: string | null;
        createdAt: Date;
        updatedAt: Date;
        timezone: string;
        description: string;
        createdBy: string | null;
        assignedTo: string | null;
        priority: string;
        workOrderTemplateId: string;
        isActive: boolean;
        assignedGroup: string | null;
        frequency: string;
        interval: number;
        startDate: Date;
        endDate: Date | null;
        daysOfWeek: number[];
        dayOfMonth: number | null;
        time: string | null;
        lastGenerated: Date | null;
        nextDue: Date | null;
        totalGenerated: number;
        completedCount: number;
        overdueCount: number;
    }>;
    update(id: string, body: any): Promise<{
        workOrderTemplate: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            notifications: import("@prisma/client/runtime/library").JsonValue;
            description: string;
            category: string;
            createdBy: string | null;
            estimatedDuration: number;
            priority: string;
            requiredSkills: string[];
            defaultAssignee: string | null;
            inspectionTemplateIds: string[];
            checklist: import("@prisma/client/runtime/library").JsonValue;
            isActive: boolean;
        };
    } & {
        id: string;
        name: string;
        location: string | null;
        createdAt: Date;
        updatedAt: Date;
        timezone: string;
        description: string;
        createdBy: string | null;
        assignedTo: string | null;
        priority: string;
        workOrderTemplateId: string;
        isActive: boolean;
        assignedGroup: string | null;
        frequency: string;
        interval: number;
        startDate: Date;
        endDate: Date | null;
        daysOfWeek: number[];
        dayOfMonth: number | null;
        time: string | null;
        lastGenerated: Date | null;
        nextDue: Date | null;
        totalGenerated: number;
        completedCount: number;
        overdueCount: number;
    }>;
    delete(id: string): Promise<{
        message: string;
    }>;
    generateWorkOrder(id: string, body: any): Promise<({
        inspections: ({
            template: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                templateId: string;
                description: string;
                schemaJson: import("@prisma/client/runtime/library").JsonValue;
                category: string;
                tags: string[];
                version: string;
                status: string;
                isPublic: boolean;
                createdBy: string | null;
                lastModifiedBy: string | null;
                estimatedDuration: number | null;
                difficulty: string | null;
                industry: string | null;
                equipmentType: string | null;
                parentId: string | null;
                isLatestVersion: boolean;
            };
        } & {
            required: boolean;
            id: string;
            templateId: string;
            status: string;
            workOrderId: string;
            inspectionId: string;
            order: number;
            completedAt: Date | null;
            resultJson: import("@prisma/client/runtime/library").JsonValue | null;
        })[];
        workOrderTemplate: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            notifications: import("@prisma/client/runtime/library").JsonValue;
            description: string;
            category: string;
            createdBy: string | null;
            estimatedDuration: number;
            priority: string;
            requiredSkills: string[];
            defaultAssignee: string | null;
            inspectionTemplateIds: string[];
            checklist: import("@prisma/client/runtime/library").JsonValue;
            isActive: boolean;
        } | null;
    } & {
        id: string;
        location: string | null;
        createdAt: Date;
        updatedAt: Date;
        description: string;
        status: string;
        createdBy: string | null;
        estimatedDuration: number | null;
        workOrderId: string;
        title: string;
        dueDate: Date | null;
        assignedTo: string;
        priority: string;
        requiredSkills: string[];
        dependencies: string[];
        workOrderTemplateId: string | null;
    }) | null>;
    toggleActive(id: string): Promise<{
        id: string;
        name: string;
        location: string | null;
        createdAt: Date;
        updatedAt: Date;
        timezone: string;
        description: string;
        createdBy: string | null;
        assignedTo: string | null;
        priority: string;
        workOrderTemplateId: string;
        isActive: boolean;
        assignedGroup: string | null;
        frequency: string;
        interval: number;
        startDate: Date;
        endDate: Date | null;
        daysOfWeek: number[];
        dayOfMonth: number | null;
        time: string | null;
        lastGenerated: Date | null;
        nextDue: Date | null;
        totalGenerated: number;
        completedCount: number;
        overdueCount: number;
    }>;
    private calculateNextDue;
    private calculateTimeUntilNext;
}
export {};
